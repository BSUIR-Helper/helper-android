configurations {
    all*.exclude group: 'com.android.support', module: 'support-v4'
}

buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

def versionMajor = 0
def versionMinor = 3
def versionPatch = 2
def versionBuild = 1 // bump for dogfood builds, public betas, etc.

android {
    compileSdkVersion 22
    buildToolsVersion "22.0"
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    defaultConfig {
        applicationId "ru.bsuirhelper.android"
        minSdkVersion 14
        targetSdkVersion 22
        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
    }
    sourceSets {
        instrumentTest.setRoot('tests')
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }
    if (project.hasProperty("idiscount.properties")
            && file(project.property("idiscount.properties")).exists()) {
        Properties keyProps = new Properties()
        keyProps.load(new FileInputStream(file(project.property("idiscount.properties"))))

        signingConfigs {
            release {
                storePassword keyProps['keystore.password']
                keyAlias keyProps['keyAlias']
                keyPassword keyProps['keyPassword']
                storeFile file(keyProps['keystore'])
            }
        }

        buildTypes {
            release {
                minifyEnabled true
                proguardFiles 'proguard-rules.pro'
                debuggable true
                jniDebuggable true
                renderscriptDebuggable true
                zipAlignEnabled true
                signingConfig signingConfigs.release
            }

            debug {
                minifyEnabled false
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
                debuggable true
                jniDebuggable true
                renderscriptDebuggable true
                zipAlignEnabled true
            }
        }
    } else {
        buildTypes {
            release {
                minifyEnabled false
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            }
            debug {
                minifyEnabled false
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                debuggable true
                jniDebuggable true
                renderscriptDebuggable true
                zipAlignEnabled true
                signingConfig signingConfigs.debug
            }
        }
    }
    productFlavors {
    }
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            output.outputFile = new File(
                    output.outputFile.parent,
                    output.outputFile.name.replace(".apk", "-${variant.versionCode}.apk"))
        }
    }
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }
}

dependencies {
    compile 'com.android.support:appcompat-v7:22.1.0'
    compile 'com.google.code.gson:gson:2.3.1'
    compile 'com.orhanobut:logger:1.4'
    compile 'joda-time:joda-time:2.7'
    compile('com.crashlytics.sdk.android:crashlytics:2.2.3@aar') {
        transitive = true;
    }
    compile 'com.orhanobut:logger:1.8'
    compile 'com.squareup.retrofit:retrofit:1.9.0'
}
